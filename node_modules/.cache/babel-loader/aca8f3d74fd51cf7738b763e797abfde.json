{"ast":null,"code":"import { getAllTasks } from \"../apiService\";\nimport moment from 'moment';\nexport var TASKS_ON_MONTH = \"TASKS_ON_MONTH\";\nexport var DUMP_MONTH = \"DUMP_MONTH\";\nexport var SWITCH_MONTH = \"SWITCH_MONTH\";\n\nvar searchTasks = function searchTasks(dateStart) {\n  return getAllTasks().filter(function (task) {\n    return moment(task.dateStart, \"YYYY-MM-DDTHH:mm\").format(\"DD-MM-YYYY\") === dateStart;\n  }).sort(function (a, b) {\n    return moment(a.dateStart, \"YYYY-MM-DDTHH:mm\").format('X') - moment(b.dateStart, \"YYYY-MM-DDTHH:mm\").format('X');\n  });\n};\n\nexport var dumpMonth = function dumpMonth() {\n  return function (dispatch) {\n    var daysInMonth = moment().daysInMonth();\n    var firstMonthDate = moment().date(1).format(\"DD-MM-YYYY\");\n    var lastMonthDate = moment().date(daysInMonth).format(\"DD-MM-YYYY\");\n    var tasksOnMonth = [];\n\n    for (var i = 0; i < 31; i++) {\n      var date = moment(firstMonthDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n      tasksOnMonth.push({\n        date: date,\n        tasks: searchTasks(date)\n      });\n    }\n\n    console.log(tasksOnMonth);\n    dispatch({\n      type: TASKS_ON_MONTH,\n      payload: tasksOnMonth\n    });\n    dispatch({\n      type: DUMP_MONTH,\n      payload: {\n        daysInMonth: daysInMonth,\n        firstMonthDate: firstMonthDate,\n        lastMonthDate: lastMonthDate\n      }\n    });\n  };\n};\nexport var changeMonth = function changeMonth(monthDays) {\n  return function (dispatch) {\n    var selectFirst = monthDays.selectFirst,\n        selectLast = monthDays.selectLast,\n        side = monthDays.side;\n    var firstMonthDate;\n    var lastMonthDate;\n\n    switch (side) {\n      case 'next':\n        {\n          firstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, 'month').format(\"DD-MM-YYYY\");\n          lastMonthDate = moment(selectLast, \"DD-MM-YYYY\").add(1, 'month').format(\"DD-MM-YYYY\");\n          break;\n        }\n\n      case 'prev':\n        {\n          firstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, 'month').format(\"DD-MM-YYYY\");\n          lastMonthDate = moment(selectLast, \"DD-MM-YYYY\").subtract(1, 'month').format(\"DD-MM-YYYY\");\n          break;\n        }\n    }\n\n    var tasksOnMonth = [];\n\n    for (var i = 0; i < 31; i++) {\n      var date = moment(firstMonthDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n      tasksOnMonth.push({\n        date: date,\n        tasks: searchTasks(date)\n      });\n    }\n\n    dispatch({\n      type: TASKS_ON_MONTH,\n      payload: tasksOnMonth\n    });\n    dispatch({\n      type: SWITCH_MONTH,\n      payload: {\n        firstMonthDate: firstMonthDate,\n        lastMonthDate: lastMonthDate\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/den/project/etagiToDo/src/actions/CalendarMonthAction.js"],"names":["getAllTasks","moment","TASKS_ON_MONTH","DUMP_MONTH","SWITCH_MONTH","searchTasks","dateStart","filter","task","format","sort","a","b","dumpMonth","dispatch","daysInMonth","firstMonthDate","date","lastMonthDate","tasksOnMonth","i","add","push","tasks","console","log","type","payload","changeMonth","monthDays","selectFirst","selectLast","side","subtract"],"mappings":"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","sourcesContent":["import {getAllTasks} from \"../apiService\";\nimport moment from 'moment';\n\nexport const TASKS_ON_MONTH = \"TASKS_ON_MONTH\";\nexport const DUMP_MONTH = \"DUMP_MONTH\";\nexport const SWITCH_MONTH = \"SWITCH_MONTH\";\n\nconst searchTasks = (dateStart) => getAllTasks().filter( task =>\n\tmoment(task.dateStart, \"YYYY-MM-DDTHH:mm\").format(\"DD-MM-YYYY\") === dateStart\n).sort(function(a, b){\n\treturn moment(a.dateStart, \"YYYY-MM-DDTHH:mm\").format('X')-moment(b.dateStart, \"YYYY-MM-DDTHH:mm\").format('X')\n});\n\nexport const dumpMonth = () => dispatch => {\n\tconst daysInMonth = moment().daysInMonth();\n\tconst firstMonthDate = moment().date(1).format(\"DD-MM-YYYY\");\n\tconst lastMonthDate = moment().date(daysInMonth).format(\"DD-MM-YYYY\");\n\tconst tasksOnMonth = [];\n\tfor (let i = 0; i < 31; i++) {\n\t\tconst date = moment(firstMonthDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n\t\ttasksOnMonth.push({\n\t\t\tdate,\n\t\t\ttasks: searchTasks(date)})\n\t}\n\tconsole.log(tasksOnMonth);\n\tdispatch({\n\t\ttype: TASKS_ON_MONTH,\n\t\tpayload: tasksOnMonth\n\t});\n\tdispatch({\n\t\ttype: DUMP_MONTH,\n\t\tpayload: { daysInMonth, firstMonthDate, lastMonthDate }\n\t})\n};\n\nexport const changeMonth = (monthDays) => dispatch => {\n\tconst {selectFirst, selectLast, side} = monthDays;\n\tlet firstMonthDate;\n\tlet lastMonthDate;\n\tswitch (side) {\n\t\tcase 'next': {\n\t\t\tfirstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, 'month').format(\"DD-MM-YYYY\");\n\t\t\tlastMonthDate = moment(selectLast, \"DD-MM-YYYY\").add(1, 'month').format(\"DD-MM-YYYY\");\n\t\t\tbreak;\n\t\t}\n\t\tcase 'prev': {\n\t\t\tfirstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, 'month').format(\"DD-MM-YYYY\");\n\t\t\tlastMonthDate = moment(selectLast, \"DD-MM-YYYY\").subtract(1, 'month').format(\"DD-MM-YYYY\");\n\t\t\tbreak;\n\t\t}\n\t}\n\tconst tasksOnMonth = [];\n\tfor (let i = 0; i < 31; i++) {\n\t\tconst date = moment(firstMonthDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n\t\ttasksOnMonth.push({\n\t\t\tdate,\n\t\t\ttasks: searchTasks(date)})\n\t}\n\tdispatch({\n\t\ttype: TASKS_ON_MONTH,\n\t\tpayload: tasksOnMonth\n\t});\n\tdispatch({\n\t\ttype: SWITCH_MONTH,\n\t\tpayload: { firstMonthDate, lastMonthDate }\n\t})\n};\n"]},"metadata":{},"sourceType":"module"}