{"ast":null,"code":"import _objectSpread from \"/home/den/project/etagiToDo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { deleteTask, getAllTasks, postTask } from \"../apiService\";\nimport moment from 'moment';\nimport { CLEAN_FORM, EDIT_TASK, IS_OPEN_FORM } from \"./listTasksAction\";\nexport var TASKS = \"GET_TASKS\";\nexport var DUMP = \"DUMP_MONTH\";\nexport var SWITCH = \"SWITCH_MONTH\";\nexport var cleanForm = function cleanForm() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAN_FORM\n    });\n    dispatch({\n      type: IS_OPEN_FORM,\n      payload: true\n    });\n  };\n};\nexport var addTask = function addTask(body, type) {\n  return function (dispatch) {\n    var cleanBody = _objectSpread({}, body);\n\n    delete cleanBody.typeForm;\n    postTask(cleanBody);\n    var items = getAllTasks();\n    dispatch({\n      type: TASKS,\n      payload: items\n    });\n    dispatch({\n      type: CLEAN_FORM\n    });\n    dispatch({\n      type: IS_OPEN_FORM,\n      payload: false\n    });\n  };\n};\nexport var delTask = function delTask(id) {\n  return function (dispatch) {\n    deleteTask(id);\n    var tasks = getAllTasks();\n    dispatch({\n      type: TASKS,\n      payload: tasks\n    });\n  };\n};\nexport var editTask = function editTask(id) {\n  return function (dispatch) {\n    var tasks = getAllTasks().filter(function (t) {\n      return t.id === id;\n    })[0];\n    dispatch({\n      type: EDIT_TASK,\n      payload: tasks\n    });\n    dispatch({\n      type: IS_OPEN_FORM,\n      payload: true\n    });\n  };\n};\nexport var dumpMonth = function dumpMonth() {\n  return function (dispatch) {\n    var daysInMonth = moment().daysInMonth();\n    var firstMonthDate = moment().date(1).format(\"DD-MM-YYYY\");\n    var lastMonthDate = moment().date(daysInMonth).format(\"DD-MM-YYYY\");\n    dispatch({\n      type: TASKS,\n      payload: getAllTasks({\n        filterType: 'monthGroup',\n        filterProps: firstMonthDate\n      })\n    });\n    dispatch({\n      type: DUMP,\n      payload: {\n        firstMonthDate: firstMonthDate,\n        lastMonthDate: lastMonthDate\n      }\n    });\n  };\n};\nexport var changeMonth = function changeMonth(monthDays) {\n  return function (dispatch) {\n    var selectFirst = monthDays.selectFirst,\n        selectLast = monthDays.selectLast,\n        side = monthDays.side;\n    var firstMonthDate;\n    var lastMonthDate;\n\n    switch (side) {\n      case 'next':\n        {\n          var daysInMonth = moment(selectFirst, \"DD-MM-YYYY\").add(1, \"month\").daysInMonth();\n          firstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, 'month').format(\"DD-MM-YYYY\");\n          lastMonthDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, \"month\").date(daysInMonth).format(\"DD-MM-YYYY\");\n          break;\n        }\n\n      case 'prev':\n        {\n          var _daysInMonth = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, \"month\").daysInMonth();\n\n          firstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, 'month').format(\"DD-MM-YYYY\");\n          lastMonthDate = moment(selectLast, \"DD-MM-YYYY\").subtract(1, 'month').date(_daysInMonth).format(\"DD-MM-YYYY\");\n          break;\n        }\n    }\n\n    dispatch({\n      type: TASKS,\n      payload: getAllTasks({\n        filterType: 'monthGroup',\n        filterProps: firstMonthDate\n      })\n    });\n    dispatch({\n      type: SWITCH,\n      payload: {\n        firstMonthDate: firstMonthDate,\n        lastMonthDate: lastMonthDate\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/den/project/etagiToDo/src/actions/CalendarMonthAction.js"],"names":["deleteTask","getAllTasks","postTask","moment","CLEAN_FORM","EDIT_TASK","IS_OPEN_FORM","TASKS","DUMP","SWITCH","cleanForm","dispatch","type","payload","addTask","body","cleanBody","typeForm","items","delTask","id","tasks","editTask","filter","t","dumpMonth","daysInMonth","firstMonthDate","date","format","lastMonthDate","filterType","filterProps","changeMonth","monthDays","selectFirst","selectLast","side","add","subtract"],"mappings":"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","sourcesContent":["import {deleteTask, getAllTasks, postTask} from \"../apiService\";\nimport moment from 'moment';\nimport {CLEAN_FORM, EDIT_TASK, IS_OPEN_FORM} from \"./listTasksAction\";\n\nexport const TASKS = \"GET_TASKS\";\nexport const DUMP = \"DUMP_MONTH\";\nexport const SWITCH = \"SWITCH_MONTH\";\n\nexport const cleanForm = () => dispatch => {\n\tdispatch({ type: CLEAN_FORM });\n\tdispatch({ type: IS_OPEN_FORM, payload: true });\n};\n\nexport const addTask = (body, type) => dispatch => {\n\tconst cleanBody = {...body};\n\tdelete cleanBody.typeForm;\n\tpostTask(cleanBody);\n\tconst items = getAllTasks();\n\tdispatch({ type: TASKS, payload: items });\n\tdispatch({ type: CLEAN_FORM });\n\tdispatch({ type: IS_OPEN_FORM, payload: false});\n};\n\nexport const delTask = (id) => dispatch => {\n\tdeleteTask(id);\n\tconst tasks = getAllTasks();\n\tdispatch({ type: TASKS, payload: tasks })\n};\n\nexport const editTask = (id) => dispatch => {\n\tconst tasks = getAllTasks().filter(t => t.id === id)[0];\n\tdispatch({ type: EDIT_TASK, payload: tasks });\n\tdispatch({ type: IS_OPEN_FORM, payload: true });\n};\n\nexport const dumpMonth = () => dispatch => {\n\tconst daysInMonth = moment().daysInMonth();\n\tconst firstMonthDate = moment().date(1).format(\"DD-MM-YYYY\");\n\tconst lastMonthDate = moment().date(daysInMonth).format(\"DD-MM-YYYY\");\n\tdispatch({\n\t\ttype: TASKS,\n\t\tpayload: getAllTasks({filterType: 'monthGroup', filterProps: firstMonthDate})\n\t});\n\tdispatch({\n\t\ttype: DUMP,\n\t\tpayload: { firstMonthDate, lastMonthDate }\n\t})\n};\n\nexport const changeMonth = (monthDays) => dispatch => {\n\tconst {selectFirst, selectLast, side} = monthDays;\n\tlet firstMonthDate;\n\tlet lastMonthDate;\n\tswitch (side) {\n\t\tcase 'next': {\n\t\t\tconst daysInMonth = moment(selectFirst, \"DD-MM-YYYY\").add(1, \"month\").daysInMonth();\n\t\t\tfirstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, 'month').format(\"DD-MM-YYYY\");\n\t\t\tlastMonthDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, \"month\").date(daysInMonth).format(\"DD-MM-YYYY\");\t\t\tbreak;\n\t\t}\n\t\tcase 'prev': {\n\t\t\tconst daysInMonth = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, \"month\").daysInMonth();\n\t\t\tfirstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, 'month').format(\"DD-MM-YYYY\");\n\t\t\tlastMonthDate = moment(selectLast, \"DD-MM-YYYY\").subtract(1, 'month').date(daysInMonth).format(\"DD-MM-YYYY\");\n\t\t\tbreak;\n\t\t}\n\t}\n\tdispatch({\n\t\ttype: TASKS,\n\t\tpayload: getAllTasks({filterType: 'monthGroup', filterProps: firstMonthDate})\n\t});\n\tdispatch({\n\t\ttype: SWITCH,\n\t\tpayload: { firstMonthDate, lastMonthDate }\n\t})\n};\n"]},"metadata":{},"sourceType":"module"}