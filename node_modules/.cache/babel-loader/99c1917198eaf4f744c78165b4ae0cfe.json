{"ast":null,"code":"import _toConsumableArray from \"/home/den/project/etagiToDo/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { getAllTasks } from \"../apiService\";\nimport moment from 'moment';\n\nvar searchTasks = function searchTasks(dateStart) {\n  return getAllTasks().filter(function (task) {\n    return moment(task.dateStart, \"YYYY-MM-DDTHH:mm\").format(\"DD-MM-YYYY\") === dateStart;\n  }).sort(function (a, b) {\n    return moment(a.dateStart, \"YYYY-MM-DDTHH:mm\").format('X') - moment(b.dateStart, \"YYYY-MM-DDTHH:mm\").format('X');\n  });\n};\n\nexport var resetWeek = function resetWeek() {\n  return function (dispatch) {\n    var selectDay = moment().format(\"DD-MM-YYYY\");\n    var selectTabs = moment().isoWeekday();\n    var firstWeekDate = moment().isoWeekday(1).format(\"DD-MM-YYYY\");\n    var lastWeekDate = moment().isoWeekday(7).format(\"DD-MM-YYYY\");\n    var tasksOnWeek = [];\n\n    for (var i = 0; i < 7; i++) {\n      tasksOnWeek.push.apply(tasksOnWeek, _toConsumableArray(searchTasks(moment(firstWeekDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\"))));\n    }\n\n    console.log(tasksOnWeek);\n    dispatch({\n      type: \"TASKS_ON_WEEK\",\n      payload: tasksOnWeek\n    });\n    dispatch({\n      type: \"RESET_WEEK\",\n      payload: {\n        selectDay: selectDay,\n        selectTabs: selectTabs,\n        firstWeekDate: firstWeekDate,\n        lastWeekDate: lastWeekDate\n      }\n    });\n  };\n};\nexport var nextWeek = function nextWeek(weekDays) {\n  return function (dispatch) {\n    var selectFirst = weekDays.selectFirst,\n        selectLast = weekDays.selectLast;\n    var firstWeekDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, 'week').format(\"DD-MM-YYYY\");\n    var lastWeekDate = moment(selectLast, \"DD-MM-YYYY\").add(1, 'week').format(\"DD-MM-YYYY\");\n    var selectTabs = moment().isoWeek() === moment(firstWeekDate, \"DD-MM-YYYY\").isoWeek() && moment().year() === moment(firstWeekDate, \"DD-MM-YYYY\").year() ? moment().isoWeekday() : 1;\n    var selectDay = moment(firstWeekDate, \"DD-MM-YYYY\").isoWeekday(+selectTabs).format(\"DD-MM-YYYY\");\n    var tasksOnDay = searchTasks(selectDay);\n    dispatch({\n      type: \"TASKS_ON_WEEK\",\n      payload: tasksOnDay\n    });\n    dispatch({\n      type: \"SWITCH_WEEK\",\n      payload: {\n        firstWeekDate: firstWeekDate,\n        lastWeekDate: lastWeekDate,\n        selectTabs: selectTabs,\n        selectDay: selectDay\n      }\n    });\n  };\n};\nexport var prevWeek = function prevWeek(weekDays) {\n  return function (dispatch) {\n    var selectFirst = weekDays.selectFirst,\n        selectLast = weekDays.selectLast;\n    var firstWeekDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, 'week').format(\"DD-MM-YYYY\");\n    var lastWeekDate = moment(selectLast, \"DD-MM-YYYY\").subtract(1, 'week').format(\"DD-MM-YYYY\");\n    var selectTabs = moment().isoWeek() === moment(firstWeekDate, \"DD-MM-YYYY\").isoWeek() && moment().year() === moment(firstWeekDate, \"DD-MM-YYYY\").year() ? moment().isoWeekday() : 1;\n    var selectDay = moment(firstWeekDate, \"DD-MM-YYYY\").isoWeekday(+selectTabs).format(\"DD-MM-YYYY\");\n    var tasksOnDay = searchTasks(selectDay);\n    dispatch({\n      type: \"TASKS_ON_WEEK\",\n      payload: tasksOnDay\n    });\n    dispatch({\n      type: \"SWITCH_WEEK\",\n      payload: {\n        firstWeekDate: firstWeekDate,\n        lastWeekDate: lastWeekDate,\n        selectTabs: selectTabs,\n        selectDay: selectDay\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/den/project/etagiToDo/src/actions/CalendarWeekAction.js"],"names":["getAllTasks","moment","searchTasks","dateStart","filter","task","format","sort","a","b","resetWeek","dispatch","selectDay","selectTabs","isoWeekday","firstWeekDate","lastWeekDate","tasksOnWeek","i","push","add","console","log","type","payload","nextWeek","weekDays","selectFirst","selectLast","isoWeek","year","tasksOnDay","prevWeek","subtract"],"mappings":"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","sourcesContent":["import {getAllTasks} from \"../apiService\";\nimport moment from 'moment';\n\nconst searchTasks = (dateStart) => getAllTasks().filter( task =>\n\tmoment(task.dateStart, \"YYYY-MM-DDTHH:mm\").format(\"DD-MM-YYYY\") === dateStart\n).sort(function(a, b){\n\treturn moment(a.dateStart, \"YYYY-MM-DDTHH:mm\").format('X')-moment(b.dateStart, \"YYYY-MM-DDTHH:mm\").format('X')\n});\n\nexport const resetWeek = () => dispatch => {\n\tconst selectDay = moment().format(\"DD-MM-YYYY\");\n\tconst selectTabs = moment().isoWeekday();\n\tconst firstWeekDate = moment().isoWeekday(1).format(\"DD-MM-YYYY\");\n\tconst lastWeekDate =  moment().isoWeekday(7).format(\"DD-MM-YYYY\");\n\tconst tasksOnWeek = [];\n\tfor (let i = 0; i < 7; i++) {\n\t\ttasksOnWeek.push(...searchTasks(moment(firstWeekDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\")));\n\t}\n\tconsole.log(tasksOnWeek);\n\tdispatch({\n\t\ttype: \"TASKS_ON_WEEK\",\n\t\tpayload: tasksOnWeek\n\t});\n\tdispatch({\n\t\ttype: \"RESET_WEEK\",\n\t\tpayload: { selectDay, selectTabs, firstWeekDate, lastWeekDate }\n\t})\n};\n\nexport const nextWeek = (weekDays) => dispatch => {\n\tconst {selectFirst, selectLast} = weekDays;\n\tconst firstWeekDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, 'week').format(\"DD-MM-YYYY\");\n\tconst lastWeekDate = moment(selectLast, \"DD-MM-YYYY\").add(1, 'week').format(\"DD-MM-YYYY\");\n\tconst selectTabs = (\n\t\tmoment().isoWeek() === moment(firstWeekDate, \"DD-MM-YYYY\").isoWeek()\n\t\t&& moment().year() === moment(firstWeekDate, \"DD-MM-YYYY\").year()\n\t) ? moment().isoWeekday() : 1;\n\tconst selectDay = moment(firstWeekDate, \"DD-MM-YYYY\").isoWeekday(+selectTabs).format(\"DD-MM-YYYY\");\n\tconst tasksOnDay = searchTasks(selectDay);\n\tdispatch({\n\t\ttype: \"TASKS_ON_WEEK\",\n\t\tpayload: tasksOnDay\n\t});\n\tdispatch({\n\t\ttype: \"SWITCH_WEEK\",\n\t\tpayload: { firstWeekDate, lastWeekDate, selectTabs, selectDay }\n\t})\n};\n\nexport const prevWeek = (weekDays) => dispatch => {\n\tconst {selectFirst, selectLast} = weekDays;\n\tconst firstWeekDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, 'week').format(\"DD-MM-YYYY\");\n\tconst lastWeekDate = moment(selectLast, \"DD-MM-YYYY\").subtract(1, 'week').format(\"DD-MM-YYYY\");\n\tconst selectTabs = (\n\t\tmoment().isoWeek() === moment(firstWeekDate, \"DD-MM-YYYY\").isoWeek()\n\t\t&& moment().year() === moment(firstWeekDate, \"DD-MM-YYYY\").year()\n\t) ? moment().isoWeekday() : 1;\n\tconst selectDay = moment(firstWeekDate, \"DD-MM-YYYY\").isoWeekday(+selectTabs).format(\"DD-MM-YYYY\");\n\tconst tasksOnDay = searchTasks(selectDay);\n\tdispatch({\n\t\ttype: \"TASKS_ON_WEEK\",\n\t\tpayload: tasksOnDay\n\t});\n\tdispatch({\n\t\ttype: \"SWITCH_WEEK\",\n\t\tpayload: { firstWeekDate, lastWeekDate, selectTabs, selectDay }\n\t})\n};\n"]},"metadata":{},"sourceType":"module"}