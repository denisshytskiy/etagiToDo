{"ast":null,"code":"import { deleteTask, getAllTasks } from \"../apiService\";\nimport moment from 'moment';\nimport { CLEAN_FORM, EDIT_TASK, IS_OPEN_FORM, TASK_FROM_DAY } from \"./listTasksAction\";\nexport var TASKS_ON_MONTH = \"TASKS_ON_MONTH\";\nexport var DUMP_MONTH = \"DUMP_MONTH\";\nexport var SWITCH_MONTH = \"SWITCH_MONTH\";\n\nvar searchTasks = function searchTasks(dateStart) {\n  return getAllTasks().filter(function (task) {\n    return moment(task.dateStart, \"YYYY-MM-DDTHH:mm\").format(\"DD-MM-YYYY\") === dateStart;\n  }).sort(function (a, b) {\n    return moment(a.dateStart, \"YYYY-MM-DDTHH:mm\").format('X') - moment(b.dateStart, \"YYYY-MM-DDTHH:mm\").format('X');\n  });\n};\n\nexport var cleanForm = function cleanForm() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAN_FORM\n    });\n  };\n};\nexport var delTask = function delTask(id) {\n  return function (dispatch) {\n    deleteTask(id);\n    var tasks = getAllTasks();\n    dispatch({\n      type: TASK_FROM_DAY,\n      payload: tasks\n    });\n  };\n};\nexport var editTask = function editTask(id) {\n  return function (dispatch) {\n    var tasks = getAllTasks().filter(function (t) {\n      return t.id === id;\n    })[0];\n    dispatch({\n      type: EDIT_TASK,\n      payload: tasks\n    });\n    dispatch({\n      type: IS_OPEN_FORM,\n      payload: true\n    });\n  };\n};\nexport var dumpMonth = function dumpMonth() {\n  return function (dispatch) {\n    var daysInMonth = moment().daysInMonth();\n    var firstMonthDate = moment().date(1).format(\"DD-MM-YYYY\");\n    var lastMonthDate = moment().date(daysInMonth).format(\"DD-MM-YYYY\");\n    var tasksOnMonth = [];\n\n    for (var i = 0; i < 31; i++) {\n      var date = moment(firstMonthDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n      tasksOnMonth.push({\n        date: date,\n        tasks: searchTasks(date)\n      });\n    }\n\n    console.log(tasksOnMonth);\n    dispatch({\n      type: TASKS_ON_MONTH,\n      payload: tasksOnMonth\n    });\n    dispatch({\n      type: DUMP_MONTH,\n      payload: {\n        daysInMonth: daysInMonth,\n        firstMonthDate: firstMonthDate,\n        lastMonthDate: lastMonthDate\n      }\n    });\n  };\n};\nexport var changeMonth = function changeMonth(monthDays) {\n  return function (dispatch) {\n    var selectFirst = monthDays.selectFirst,\n        selectLast = monthDays.selectLast,\n        side = monthDays.side;\n    var firstMonthDate;\n    var lastMonthDate;\n\n    switch (side) {\n      case 'next':\n        {\n          firstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, 'month').format(\"DD-MM-YYYY\");\n          lastMonthDate = moment(selectLast, \"DD-MM-YYYY\").add(1, 'month').format(\"DD-MM-YYYY\");\n          break;\n        }\n\n      case 'prev':\n        {\n          firstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, 'month').format(\"DD-MM-YYYY\");\n          lastMonthDate = moment(selectLast, \"DD-MM-YYYY\").subtract(1, 'month').format(\"DD-MM-YYYY\");\n          break;\n        }\n    }\n\n    var tasksOnMonth = [];\n\n    for (var i = 0; i < 31; i++) {\n      var date = moment(firstMonthDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n      tasksOnMonth.push({\n        date: date,\n        tasks: searchTasks(date)\n      });\n    }\n\n    dispatch({\n      type: TASKS_ON_MONTH,\n      payload: tasksOnMonth\n    });\n    dispatch({\n      type: SWITCH_MONTH,\n      payload: {\n        firstMonthDate: firstMonthDate,\n        lastMonthDate: lastMonthDate\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/den/project/etagiToDo/src/actions/CalendarMonthAction.js"],"names":["deleteTask","getAllTasks","moment","CLEAN_FORM","EDIT_TASK","IS_OPEN_FORM","TASK_FROM_DAY","TASKS_ON_MONTH","DUMP_MONTH","SWITCH_MONTH","searchTasks","dateStart","filter","task","format","sort","a","b","cleanForm","dispatch","type","delTask","id","tasks","payload","editTask","t","dumpMonth","daysInMonth","firstMonthDate","date","lastMonthDate","tasksOnMonth","i","add","push","console","log","changeMonth","monthDays","selectFirst","selectLast","side","subtract"],"mappings":"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","sourcesContent":["import {deleteTask, getAllTasks} from \"../apiService\";\nimport moment from 'moment';\nimport {CLEAN_FORM, EDIT_TASK, IS_OPEN_FORM, TASK_FROM_DAY} from \"./listTasksAction\";\n\nexport const TASKS_ON_MONTH = \"TASKS_ON_MONTH\";\nexport const DUMP_MONTH = \"DUMP_MONTH\";\nexport const SWITCH_MONTH = \"SWITCH_MONTH\";\n\nconst searchTasks = (dateStart) => getAllTasks().filter( task =>\n\tmoment(task.dateStart, \"YYYY-MM-DDTHH:mm\").format(\"DD-MM-YYYY\") === dateStart\n).sort(function(a, b){\n\treturn moment(a.dateStart, \"YYYY-MM-DDTHH:mm\").format('X')-moment(b.dateStart, \"YYYY-MM-DDTHH:mm\").format('X')\n});\n\nexport const cleanForm = () => dispatch => {\n\tdispatch({ type: CLEAN_FORM })\n};\n\nexport const delTask = (id) => dispatch => {\n\tdeleteTask(id);\n\tconst tasks = getAllTasks();\n\tdispatch({ type: TASK_FROM_DAY, payload: tasks })\n};\n\nexport const editTask = (id) => dispatch => {\n\tconst tasks = getAllTasks().filter(t => t.id === id)[0];\n\tdispatch({ type: EDIT_TASK, payload: tasks });\n\tdispatch({ type: IS_OPEN_FORM, payload: true });\n};\n\nexport const dumpMonth = () => dispatch => {\n\tconst daysInMonth = moment().daysInMonth();\n\tconst firstMonthDate = moment().date(1).format(\"DD-MM-YYYY\");\n\tconst lastMonthDate = moment().date(daysInMonth).format(\"DD-MM-YYYY\");\n\tconst tasksOnMonth = [];\n\tfor (let i = 0; i < 31; i++) {\n\t\tconst date = moment(firstMonthDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n\t\ttasksOnMonth.push({\n\t\t\tdate,\n\t\t\ttasks: searchTasks(date)})\n\t}\n\tconsole.log(tasksOnMonth);\n\tdispatch({\n\t\ttype: TASKS_ON_MONTH,\n\t\tpayload: tasksOnMonth\n\t});\n\tdispatch({\n\t\ttype: DUMP_MONTH,\n\t\tpayload: { daysInMonth, firstMonthDate, lastMonthDate }\n\t})\n};\n\nexport const changeMonth = (monthDays) => dispatch => {\n\tconst {selectFirst, selectLast, side} = monthDays;\n\tlet firstMonthDate;\n\tlet lastMonthDate;\n\tswitch (side) {\n\t\tcase 'next': {\n\t\t\tfirstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, 'month').format(\"DD-MM-YYYY\");\n\t\t\tlastMonthDate = moment(selectLast, \"DD-MM-YYYY\").add(1, 'month').format(\"DD-MM-YYYY\");\n\t\t\tbreak;\n\t\t}\n\t\tcase 'prev': {\n\t\t\tfirstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, 'month').format(\"DD-MM-YYYY\");\n\t\t\tlastMonthDate = moment(selectLast, \"DD-MM-YYYY\").subtract(1, 'month').format(\"DD-MM-YYYY\");\n\t\t\tbreak;\n\t\t}\n\t}\n\tconst tasksOnMonth = [];\n\tfor (let i = 0; i < 31; i++) {\n\t\tconst date = moment(firstMonthDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n\t\ttasksOnMonth.push({\n\t\t\tdate,\n\t\t\ttasks: searchTasks(date)})\n\t}\n\tdispatch({\n\t\ttype: TASKS_ON_MONTH,\n\t\tpayload: tasksOnMonth\n\t});\n\tdispatch({\n\t\ttype: SWITCH_MONTH,\n\t\tpayload: { firstMonthDate, lastMonthDate }\n\t})\n};\n"]},"metadata":{},"sourceType":"module"}