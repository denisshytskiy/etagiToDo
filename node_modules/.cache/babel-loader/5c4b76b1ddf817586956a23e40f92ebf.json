{"ast":null,"code":"import { getAllTasks } from \"../apiService\";\nimport moment from 'moment';\nimport { CLEAN_FORM } from \"./listTasksAction\";\nexport var TASKS_ON_WEEK = \"TASKS_ON_WEEK\";\nexport var DUMP_WEEK = \"DUMP_WEEK\";\nexport var SWITCH_WEEK = \"SWITCH_WEEK\";\n\nvar searchTasks = function searchTasks(dateStart) {\n  return getAllTasks().filter(function (task) {\n    return moment(task.dateStart, \"YYYY-MM-DDTHH:mm\").format(\"DD-MM-YYYY\") === dateStart;\n  }).sort(function (a, b) {\n    return moment(a.dateStart, \"YYYY-MM-DDTHH:mm\").format('X') - moment(b.dateStart, \"YYYY-MM-DDTHH:mm\").format('X');\n  });\n};\n\nexport var cleanForm = function cleanForm() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAN_FORM\n    });\n  };\n};\nexport var dumpWeek = function dumpWeek() {\n  return function (dispatch) {\n    var firstWeekDate = moment().isoWeekday(1).format(\"DD-MM-YYYY\");\n    var lastWeekDate = moment().isoWeekday(7).format(\"DD-MM-YYYY\");\n    var tasksOnWeek = [];\n\n    for (var i = 0; i < 7; i++) {\n      var date = moment(firstWeekDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n      tasksOnWeek.push({\n        date: date,\n        tasks: searchTasks(date)\n      });\n    }\n\n    dispatch({\n      type: TASKS_ON_WEEK,\n      payload: tasksOnWeek\n    });\n    dispatch({\n      type: DUMP_WEEK,\n      payload: {\n        firstWeekDate: firstWeekDate,\n        lastWeekDate: lastWeekDate\n      }\n    });\n  };\n};\nexport var changeWeek = function changeWeek(weekDays) {\n  return function (dispatch) {\n    var selectFirst = weekDays.selectFirst,\n        selectLast = weekDays.selectLast,\n        side = weekDays.side;\n    var firstWeekDate;\n    var lastWeekDate;\n\n    switch (side) {\n      case 'next':\n        {\n          firstWeekDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, 'week').format(\"DD-MM-YYYY\");\n          lastWeekDate = moment(selectLast, \"DD-MM-YYYY\").add(1, 'week').format(\"DD-MM-YYYY\");\n          break;\n        }\n\n      case 'prev':\n        {\n          firstWeekDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, 'week').format(\"DD-MM-YYYY\");\n          lastWeekDate = moment(selectLast, \"DD-MM-YYYY\").subtract(1, 'week').format(\"DD-MM-YYYY\");\n          break;\n        }\n    }\n\n    var tasksOnWeek = [];\n\n    for (var i = 0; i < 7; i++) {\n      var date = moment(firstWeekDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n      tasksOnWeek.push({\n        date: date,\n        tasks: searchTasks(date)\n      });\n    }\n\n    dispatch({\n      type: TASKS_ON_WEEK,\n      payload: tasksOnWeek\n    });\n    dispatch({\n      type: SWITCH_WEEK,\n      payload: {\n        firstWeekDate: firstWeekDate,\n        lastWeekDate: lastWeekDate\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/den/project/etagiToDo/src/actions/CalendarWeekAction.js"],"names":["getAllTasks","moment","CLEAN_FORM","TASKS_ON_WEEK","DUMP_WEEK","SWITCH_WEEK","searchTasks","dateStart","filter","task","format","sort","a","b","cleanForm","dispatch","type","dumpWeek","firstWeekDate","isoWeekday","lastWeekDate","tasksOnWeek","i","date","add","push","tasks","payload","changeWeek","weekDays","selectFirst","selectLast","side","subtract"],"mappings":"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","sourcesContent":["import {getAllTasks} from \"../apiService\";\nimport moment from 'moment';\nimport {CLEAN_FORM} from \"./listTasksAction\";\n\nexport const TASKS_ON_WEEK = \"TASKS_ON_WEEK\";\nexport const DUMP_WEEK = \"DUMP_WEEK\";\nexport const SWITCH_WEEK = \"SWITCH_WEEK\";\n\nconst searchTasks = (dateStart) => getAllTasks().filter( task =>\n\tmoment(task.dateStart, \"YYYY-MM-DDTHH:mm\").format(\"DD-MM-YYYY\") === dateStart\n).sort(function(a, b){\n\treturn moment(a.dateStart, \"YYYY-MM-DDTHH:mm\").format('X')-moment(b.dateStart, \"YYYY-MM-DDTHH:mm\").format('X')\n});\n\nexport const cleanForm = () => dispatch => {\n\tdispatch({ type: CLEAN_FORM })\n};\n\nexport const dumpWeek = () => dispatch => {\n\tconst firstWeekDate = moment().isoWeekday(1).format(\"DD-MM-YYYY\");\n\tconst lastWeekDate =  moment().isoWeekday(7).format(\"DD-MM-YYYY\");\n\tconst tasksOnWeek = [];\n\tfor (let i = 0; i < 7; i++) {\n\t\tconst date = moment(firstWeekDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n\t\ttasksOnWeek.push({\n\t\t\tdate,\n\t\t\ttasks: searchTasks(date)})\n\t}\n\tdispatch({\n\t\ttype: TASKS_ON_WEEK,\n\t\tpayload: tasksOnWeek\n\t});\n\tdispatch({\n\t\ttype: DUMP_WEEK,\n\t\tpayload: { firstWeekDate, lastWeekDate }\n\t})\n};\n\nexport const changeWeek = (weekDays) => dispatch => {\n\tconst {selectFirst, selectLast, side} = weekDays;\n\tlet firstWeekDate;\n\tlet lastWeekDate;\n\tswitch (side) {\n\t\tcase 'next': {\n\t\t\tfirstWeekDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, 'week').format(\"DD-MM-YYYY\");\n\t\t\tlastWeekDate = moment(selectLast, \"DD-MM-YYYY\").add(1, 'week').format(\"DD-MM-YYYY\");\n\t\t\tbreak;\n\t\t}\n\t\tcase 'prev': {\n\t\t\tfirstWeekDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, 'week').format(\"DD-MM-YYYY\");\n\t\t\tlastWeekDate = moment(selectLast, \"DD-MM-YYYY\").subtract(1, 'week').format(\"DD-MM-YYYY\");\n\t\t\tbreak;\n\t\t}\n\t}\n\tconst tasksOnWeek = [];\n\tfor (let i = 0; i < 7; i++) {\n\t\tconst date = moment(firstWeekDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n\t\ttasksOnWeek.push({\n\t\t\tdate,\n\t\t\ttasks: searchTasks(date)})\n\t}\n\tdispatch({\n\t\ttype: TASKS_ON_WEEK,\n\t\tpayload: tasksOnWeek\n\t});\n\tdispatch({\n\t\ttype: SWITCH_WEEK,\n\t\tpayload: { firstWeekDate, lastWeekDate }\n\t})\n};\n"]},"metadata":{},"sourceType":"module"}