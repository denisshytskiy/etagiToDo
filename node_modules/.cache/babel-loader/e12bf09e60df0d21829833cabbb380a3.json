{"ast":null,"code":"import { getAllTasks } from \"../apiService\";\nimport moment from 'moment';\n\nvar searchTasks = function searchTasks(dateStart) {\n  return getAllTasks().filter(function (task) {\n    return moment(task.dateStart, \"YYYY-MM-DDTHH:mm\").format(\"DD-MM-YYYY\") === dateStart;\n  }).sort(function (a, b) {\n    return moment(a.dateStart, \"YYYY-MM-DDTHH:mm\").format('X') - moment(b.dateStart, \"YYYY-MM-DDTHH:mm\").format('X');\n  });\n};\n\nvar createDaysMonth = function createDaysMonth(selectDay) {\n  var daysInMonth = moment(selectDay, \"DD-MM-YYYY\").daysInMonth();\n  var days = [];\n\n  for (var i = 1; i <= daysInMonth; i++) {\n    days.push(moment(selectDay, \"DD-MM-YYYY\").date(i).format(\"DD-MM-YYYY\"));\n  }\n\n  return days;\n};\n\nexport var resetMonth = function resetMonth() {\n  return function (dispatch) {\n    var daysInMonth = moment().daysInMonth();\n    var firstMonthDate = moment().date(1).format(\"DD-MM-YYYY\");\n    var lastMonthDate = moment().date(daysInMonth).format(\"DD-MM-YYYY\");\n    var tasksOnMonth = [];\n\n    for (var i = 0; i < 31; i++) {\n      var date = moment(firstMonthDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n      tasksOnMonth.push({\n        date: date,\n        tasks: searchTasks(date)\n      });\n    }\n\n    console.log(tasksOnMonth);\n    dispatch({\n      type: \"TASKS_ON_DAY\",\n      payload: tasksOnMonth\n    });\n    dispatch({\n      type: \"RESET_MONTH\",\n      payload: {\n        daysInMonth: daysInMonth,\n        firstMonthDate: firstMonthDate,\n        lastMonthDate: lastMonthDate\n      }\n    });\n  };\n};\nexport var nextMonth = function nextMonth(selectFirst) {\n  return function (dispatch) {\n    var daysInMonth = moment(selectFirst, \"DD-MM-YYYY\").add(1, \"month\").daysInMonth();\n    var firstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, \"month\").date(1).format(\"DD-MM-YYYY\");\n    var lastMonthDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, \"month\").date(daysInMonth).format(\"DD-MM-YYYY\");\n    var selectTabs = moment().month() === moment(firstMonthDate, \"DD-MM-YYYY\").month() && moment().year() === moment(firstMonthDate, \"DD-MM-YYYY\").year() ? moment().date() : 1;\n    var selectDay = moment(firstMonthDate, \"DD-MM-YYYY\").date(+selectTabs).format(\"DD-MM-YYYY\");\n    var daysMonth = createDaysMonth(selectDay);\n    var tasksOnDay = searchTasks(selectDay);\n    console.log(tasksOnDay);\n    dispatch({\n      type: \"TASKS_ON_DAY\",\n      payload: tasksOnDay\n    });\n    dispatch({\n      type: \"RESET_MONTH\",\n      payload: {\n        daysInMonth: daysInMonth,\n        selectDay: selectDay,\n        selectTabs: selectTabs,\n        daysMonth: daysMonth,\n        firstMonthDate: firstMonthDate,\n        lastMonthDate: lastMonthDate\n      }\n    });\n  };\n};\nexport var prevMonth = function prevMonth(selectFirst) {\n  return function (dispatch) {\n    var daysInMonth = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, \"month\").daysInMonth();\n    var firstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, \"month\").date(1).format(\"DD-MM-YYYY\");\n    var lastMonthDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, \"month\").date(daysInMonth).format(\"DD-MM-YYYY\");\n    var selectTabs = moment().month() === moment(firstMonthDate, \"DD-MM-YYYY\").month() && moment().year() === moment(firstMonthDate, \"DD-MM-YYYY\").year() ? moment().date() : 1;\n    var selectDay = moment(firstMonthDate, \"DD-MM-YYYY\").date(+selectTabs).format(\"DD-MM-YYYY\");\n    var daysMonth = createDaysMonth(selectDay);\n    var tasksOnDay = searchTasks(selectDay);\n    console.log(tasksOnDay);\n    dispatch({\n      type: \"TASKS_ON_DAY\",\n      payload: tasksOnDay\n    });\n    dispatch({\n      type: \"RESET_MONTH\",\n      payload: {\n        daysInMonth: daysInMonth,\n        selectDay: selectDay,\n        selectTabs: selectTabs,\n        daysMonth: daysMonth,\n        firstMonthDate: firstMonthDate,\n        lastMonthDate: lastMonthDate\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/den/project/etagiToDo/src/actions/CalendarMonthAction.js"],"names":["getAllTasks","moment","searchTasks","dateStart","filter","task","format","sort","a","b","createDaysMonth","selectDay","daysInMonth","days","i","push","date","resetMonth","dispatch","firstMonthDate","lastMonthDate","tasksOnMonth","add","tasks","console","log","type","payload","nextMonth","selectFirst","selectTabs","month","year","daysMonth","tasksOnDay","prevMonth","subtract"],"mappings":"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","sourcesContent":["import {getAllTasks} from \"../apiService\";\nimport moment from 'moment';\n\nconst searchTasks = (dateStart) => getAllTasks().filter( task =>\n\tmoment(task.dateStart, \"YYYY-MM-DDTHH:mm\").format(\"DD-MM-YYYY\") === dateStart\n).sort(function(a, b){\n\treturn moment(a.dateStart, \"YYYY-MM-DDTHH:mm\").format('X')-moment(b.dateStart, \"YYYY-MM-DDTHH:mm\").format('X')\n});\n\n\nconst createDaysMonth = (selectDay) => {\n\tconst daysInMonth = moment(selectDay, \"DD-MM-YYYY\").daysInMonth();\n\tconst days = [];\n\tfor (var i = 1; i <= daysInMonth; i++){\n\t\tdays.push(moment(selectDay, \"DD-MM-YYYY\").date(i).format(\"DD-MM-YYYY\"))\n\t}\n\treturn days\n};\n\nexport const resetMonth = () => dispatch => {\n\tconst daysInMonth = moment().daysInMonth();\n\tconst firstMonthDate = moment().date(1).format(\"DD-MM-YYYY\");\n\tconst lastMonthDate = moment().date(daysInMonth).format(\"DD-MM-YYYY\");\n\tconst tasksOnMonth = [];\n\tfor (let i = 0; i < 31; i++) {\n\t\tconst date = moment(firstMonthDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n\t\ttasksOnMonth.push({\n\t\t\tdate,\n\t\t\ttasks: searchTasks(date)})\n\t}\n\tconsole.log(tasksOnMonth);\n\tdispatch({\n\t\ttype: \"TASKS_ON_DAY\",\n\t\tpayload: tasksOnMonth\n\t})\n\tdispatch({\n\t\ttype: \"RESET_MONTH\",\n\t\tpayload: { daysInMonth, firstMonthDate, lastMonthDate }\n\t})\n}\n\nexport const nextMonth = (selectFirst) => dispatch => {\n\tconst daysInMonth = moment(selectFirst, \"DD-MM-YYYY\").add(1, \"month\").daysInMonth();\n\tconst firstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, \"month\").date(1).format(\"DD-MM-YYYY\");\n\tconst lastMonthDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, \"month\").date(daysInMonth).format(\"DD-MM-YYYY\");\n\tconst selectTabs = (\n\t\tmoment().month() ===  moment(firstMonthDate, \"DD-MM-YYYY\").month()\n\t\t&& moment().year() ===  moment(firstMonthDate, \"DD-MM-YYYY\").year()\n\t) ? moment().date() : 1;\n\tconst selectDay = moment(firstMonthDate, \"DD-MM-YYYY\").date(+selectTabs).format(\"DD-MM-YYYY\");\n\tconst daysMonth = createDaysMonth(selectDay);\n\tconst tasksOnDay = searchTasks(selectDay);\n\tconsole.log(tasksOnDay);\n\tdispatch({\n\t\ttype: \"TASKS_ON_DAY\",\n\t\tpayload: tasksOnDay\n\t})\n\tdispatch({\n\t\ttype: \"RESET_MONTH\",\n\t\tpayload: { daysInMonth, selectDay, selectTabs, daysMonth, firstMonthDate, lastMonthDate }\n\t})\n}\n\nexport const prevMonth = (selectFirst) => dispatch => {\n\tconst daysInMonth = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, \"month\").daysInMonth();\n\tconst firstMonthDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, \"month\").date(1).format(\"DD-MM-YYYY\");\n\tconst lastMonthDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, \"month\").date(daysInMonth).format(\"DD-MM-YYYY\");\n\tconst selectTabs = (\n\t\tmoment().month() ===  moment(firstMonthDate, \"DD-MM-YYYY\").month()\n\t\t&& moment().year() ===  moment(firstMonthDate, \"DD-MM-YYYY\").year()\n\t) ? moment().date() : 1;\n\tconst selectDay = moment(firstMonthDate, \"DD-MM-YYYY\").date(+selectTabs).format(\"DD-MM-YYYY\");\n\tconst daysMonth = createDaysMonth(selectDay);\n\tconst tasksOnDay = searchTasks(selectDay);\n\tconsole.log(tasksOnDay);\n\tdispatch({\n\t\ttype: \"TASKS_ON_DAY\",\n\t\tpayload: tasksOnDay\n\t})\n\tdispatch({\n\t\ttype: \"RESET_MONTH\",\n\t\tpayload: { daysInMonth, selectDay, selectTabs, daysMonth, firstMonthDate, lastMonthDate }\n\t})\n}\n"]},"metadata":{},"sourceType":"module"}