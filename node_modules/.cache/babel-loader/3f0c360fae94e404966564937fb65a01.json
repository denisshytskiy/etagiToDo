{"ast":null,"code":"import { deleteTask, getAllTasks } from \"../apiService\";\nimport moment from 'moment';\nimport { CLEAN_FORM, EDIT_TASK, IS_OPEN_FORM } from \"./listTasksAction\";\nexport var TASKS = \"GET_TASKS\";\nexport var DUMP = \"DUMP_WEEK\";\nexport var SWITCH = \"SWITCH_WEEK\";\nexport var cleanForm = function cleanForm() {\n  return function (dispatch) {\n    dispatch({\n      type: CLEAN_FORM\n    });\n    dispatch({\n      type: IS_OPEN_FORM,\n      payload: true\n    });\n  };\n};\nexport var delTask = function delTask(id) {\n  return function (dispatch) {\n    deleteTask(id);\n    var tasks = getAllTasks();\n    dispatch({\n      type: TASKS,\n      payload: tasks\n    });\n  };\n};\nexport var editTask = function editTask(id) {\n  return function (dispatch) {\n    var tasks = getAllTasks().filter(function (t) {\n      return t.id === id;\n    })[0];\n    dispatch({\n      type: EDIT_TASK,\n      payload: tasks\n    });\n    dispatch({\n      type: IS_OPEN_FORM,\n      payload: true\n    });\n  };\n};\nexport var dumpWeek = function dumpWeek() {\n  return function (dispatch) {\n    var firstWeekDate = moment().isoWeekday(1).format(\"DD-MM-YYYY\");\n    var lastWeekDate = moment().isoWeekday(7).format(\"DD-MM-YYYY\");\n    dispatch({\n      type: TASKS,\n      payload: getAllTasks({\n        filterType: 'weekGroup',\n        filterProps: firstWeekDate\n      })\n    });\n    dispatch({\n      type: DUMP,\n      payload: {\n        firstWeekDate: firstWeekDate,\n        lastWeekDate: lastWeekDate\n      }\n    });\n  };\n};\nexport var changeWeek = function changeWeek(weekDays) {\n  return function (dispatch) {\n    var selectFirst = weekDays.selectFirst,\n        selectLast = weekDays.selectLast,\n        side = weekDays.side;\n    var firstWeekDate;\n    var lastWeekDate;\n\n    switch (side) {\n      case 'next':\n        {\n          firstWeekDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, 'week').format(\"DD-MM-YYYY\");\n          lastWeekDate = moment(selectLast, \"DD-MM-YYYY\").add(1, 'week').format(\"DD-MM-YYYY\");\n          break;\n        }\n\n      case 'prev':\n        {\n          firstWeekDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, 'week').format(\"DD-MM-YYYY\");\n          lastWeekDate = moment(selectLast, \"DD-MM-YYYY\").subtract(1, 'week').format(\"DD-MM-YYYY\");\n          break;\n        }\n    }\n\n    var tasksOnWeek = [];\n\n    for (var i = 0; i < 7; i++) {\n      var date = moment(firstWeekDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n      tasksOnWeek.push({\n        date: date,\n        tasks: searchTasks(date)\n      });\n    }\n\n    dispatch({\n      type: TASKS,\n      payload: tasksOnWeek\n    });\n    dispatch({\n      type: SWITCH,\n      payload: {\n        firstWeekDate: firstWeekDate,\n        lastWeekDate: lastWeekDate\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/den/project/etagiToDo/src/actions/CalendarWeekAction.js"],"names":["deleteTask","getAllTasks","moment","CLEAN_FORM","EDIT_TASK","IS_OPEN_FORM","TASKS","DUMP","SWITCH","cleanForm","dispatch","type","payload","delTask","id","tasks","editTask","filter","t","dumpWeek","firstWeekDate","isoWeekday","format","lastWeekDate","filterType","filterProps","changeWeek","weekDays","selectFirst","selectLast","side","add","subtract","tasksOnWeek","i","date","push","searchTasks"],"mappings":"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","sourcesContent":["import {deleteTask, getAllTasks} from \"../apiService\";\nimport moment from 'moment';\nimport {CLEAN_FORM, EDIT_TASK, IS_OPEN_FORM} from \"./listTasksAction\";\n\nexport const TASKS = \"GET_TASKS\";\nexport const DUMP = \"DUMP_WEEK\";\nexport const SWITCH = \"SWITCH_WEEK\";\n\nexport const cleanForm = () => dispatch => {\n\tdispatch({ type: CLEAN_FORM });\n\tdispatch({ type: IS_OPEN_FORM, payload: true });\n};\n\nexport const delTask = (id) => dispatch => {\n\tdeleteTask(id);\n\tconst tasks = getAllTasks();\n\tdispatch({ type: TASKS, payload: tasks })\n};\n\nexport const editTask = (id) => dispatch => {\n\tconst tasks = getAllTasks().filter(t => t.id === id)[0];\n\tdispatch({ type: EDIT_TASK, payload: tasks });\n\tdispatch({ type: IS_OPEN_FORM, payload: true });\n};\n\nexport const dumpWeek = () => dispatch => {\n\tconst firstWeekDate = moment().isoWeekday(1).format(\"DD-MM-YYYY\");\n\tconst lastWeekDate =  moment().isoWeekday(7).format(\"DD-MM-YYYY\");\n\tdispatch({\n\t\ttype: TASKS,\n\t\tpayload: getAllTasks({filterType: 'weekGroup', filterProps: firstWeekDate})\n\t});\n\tdispatch({\n\t\ttype: DUMP,\n\t\tpayload: { firstWeekDate, lastWeekDate }\n\t})\n};\n\nexport const changeWeek = (weekDays) => dispatch => {\n\tconst {selectFirst, selectLast, side} = weekDays;\n\tlet firstWeekDate;\n\tlet lastWeekDate;\n\tswitch (side) {\n\t\tcase 'next': {\n\t\t\tfirstWeekDate = moment(selectFirst, \"DD-MM-YYYY\").add(1, 'week').format(\"DD-MM-YYYY\");\n\t\t\tlastWeekDate = moment(selectLast, \"DD-MM-YYYY\").add(1, 'week').format(\"DD-MM-YYYY\");\n\t\t\tbreak;\n\t\t}\n\t\tcase 'prev': {\n\t\t\tfirstWeekDate = moment(selectFirst, \"DD-MM-YYYY\").subtract(1, 'week').format(\"DD-MM-YYYY\");\n\t\t\tlastWeekDate = moment(selectLast, \"DD-MM-YYYY\").subtract(1, 'week').format(\"DD-MM-YYYY\");\n\t\t\tbreak;\n\t\t}\n\t}\n\tconst tasksOnWeek = [];\n\tfor (let i = 0; i < 7; i++) {\n\t\tconst date = moment(firstWeekDate, \"DD-MM-YYYY\").add(i, 'day').format(\"DD-MM-YYYY\");\n\t\ttasksOnWeek.push({\n\t\t\tdate,\n\t\t\ttasks: searchTasks(date)})\n\t}\n\tdispatch({\n\t\ttype: TASKS,\n\t\tpayload: tasksOnWeek\n\t});\n\tdispatch({\n\t\ttype: SWITCH,\n\t\tpayload: { firstWeekDate, lastWeekDate }\n\t})\n};\n"]},"metadata":{},"sourceType":"module"}